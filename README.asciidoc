= TaipeiMetroNavigator

image::https://img.shields.io/badge/License-MIT-yellow.svg[MIT License]

image:https://img.shields.io/github/v/release/leeway64/TaipeiMetroNavigator[GitHub release (latest by date)]


TaipeiMetroNavigator helps you plan trips in the Taipei Metro system!

The Taipei Metro, also known as the
https://english.dorts.gov.taipei/cp.aspx?n=2920A1D419A92E3D&s=97014AFF962241AA[MRT (Mass Rapid Transit)],
is https://english.metro.taipei/Default.aspx[the metro system for Taipei City].

To read this README in 中文, click link:doc/README.asciidoc[here].

All stations available in TaipeiMetroNavigator are based on the official Taipei Metro map. The
stations included in TaipeiMetroNavigator are the "main" stations in the MRT; that is, it does not
include the line that goes to the airport.

image::doc/taipei-metro-map.jpg[Taipei Metro Map]

Check out the Taipei Metro map at the
https://web.metro.taipei/img/all/metrotaipeimap.jpg[official Taipei MRT website].


== Architecture


Notice that TaipeiMetroNavigator is completely Dockerized; all processes run inside a Docker
container.

The serialization format Cap'n Proto is also used here; refer to
link:doc/serialization_formats.asciidoc[this page] for more information on serialization formats.

To render the architecture diagram yourself, run the following commands:

[source, bash]
----
python3 -m venv .venv
source .venv/bin/activate
sudo pip install blockdiag
blockdiag
----

== Installation
[source, bash]
----
git clone https://github.com/leeway64/TaipeiMetroNavigator.git
cd TaipeiMetroNavigator
----

== Usage
To start with, all user input is entered into a link:include/usersettings.toml[TOML file].

[source, toml]
----
[usersettings]
source = "Taipei 101"
destination = "Taipei Main Station"
lines_to_print = ["red", "blue"]
print_stats = true
----

Next, build and run TaipeiMetroNavigator by executing the following two commands:

[source, bash]
----
$ sudo docker build -t taipeimetronavigator .
$ sudo docker run taipeimetronavigator


    ====================================================================================================
     _______    _            _ __  __      _             _   _             _             _             
    |__   __|  (_)          (_)  \/  |    | |           | \ | |           (_)           | |            
       | | __ _ _ _ __   ___ _| \  / | ___| |_ _ __ ___ |  \| | __ ___   ___  __ _  __ _| |_ ___  _ __ 
       | |/ _` | | '_ \ / _ \ | |\/| |/ _ \ __| '__/ _ \| . ` |/ _` \ \ / / |/ _` |/ _` | __/ _ \| '__|
       | | (_| | | |_) |  __/ | |  | |  __/ |_| | | (_) | |\  | (_| |\ V /| | (_| | (_| | || (_) | |   
       |_|\__,_|_| .__/ \___|_|_|  |_|\___|\__|_|  \___/|_| \_|\__,_| \_/ |_|\__, |\__,_|\__\___/|_|   
                 | |                                                          __/ |                    
                 |_|                                                         |___/    
        
    ====================================================================================================
    TaipeiMetroNavigator: A trip planner for the Taipei Metro System
    Serializing TaipeiMetroNavigator user settings
    User settings have been serialized successfully into a Cap'n Proto binary file 
    Shortest route between i and m stations:
    <class 'dict'>
	    i === k === m
	    m station is 3 stations away from i stations

    Taipei Metro statistics and information:
    {
        "total_number_of_lines": 6,
        "total_number_of_stations": 7,
        "longest_line": {
            "name": "blue",
            "length": 2
        },
        "shortest_line": {
            "name": "brown",
            "length": 1
        }
    }
	    Additional line information
		    red line:
			    ['j']
		    blue line:
			    ['m', 'o']
----


== Other useful Docker commands

To list the containers and images, run:

[source, bash]
----
sudo docker image ls
sudo docker container ls -a
----

`+docker container ls -a+` shows the stopped __and__ running containers.


If you wish to remove all containers and images, run:

[source, bash]
----
sudo docker container prune -f
sudo docker image prune --force
----


== Running unit tests

[source, bash]
----
pytest --verbose --color=yes --full-trace
----


== Third-party tools

- https://github.com/capnproto/pycapnp[pycapnp] (BSD-2-Clause License): Python bindings for Cap'n Proto.

- https://www.docker.com/[Docker]: Application containerization.

- https://github.com/uiri/toml[toml] (MIT License): Python library for parsing TOML files.

- https://docs.pytest.org/en/6.2.x/index.html[pytest] (MIT License): Python unit testing library.

- https://pypi.org/project/pyinline/[pyinline] (MIT License): Provides Python function inlining.

- https://pypi.org/project/pandas/[pandas] (BSD-3-Clause): Python data structures helpful for data
analysis.

- https://github.com/scipy/scipy[scipy] (BSD-3-Clause): Python library for scientific computing.
